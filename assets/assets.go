// Code generated by go-bindata.
// sources:
// assets/bake.lua
// assets/docker.lua
// assets/git.lua
// assets/go.lua
// assets/shim.lua
// DO NOT EDIT!

package assets

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"strings"
	"os"
	"time"
	"io/ioutil"
	"path/filepath"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name string
	size int64
	mode os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _bakeLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\x4a\xcc\x4e\x55\xb0\x55\xa8\xae\xe5\xe2\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x00\x89\xe9\x25\xe7\x17\x54\x6a\x14\x17\x25\xeb\x28\xa4\x14\x97\x68\x72\x29\x28\xe8\xea\x2a\x84\xf8\xbb\xf8\x5b\x29\x38\xa6\xa4\x28\x24\xe7\xe7\xe6\x26\xe6\xa5\x28\x94\xe4\x2b\x80\x14\x2a\xa4\x65\xe6\xa4\xea\x71\xa5\xe6\xa5\x20\x19\x93\x96\x5f\x94\x9a\x98\x9c\xa1\x91\x96\x87\xa1\x1d\x2a\x85\x6c\x4c\x49\x62\x51\x7a\x6a\x09\xc4\x0c\x40\x00\x00\x00\xff\xff\x32\x5f\x50\x7f\x95\x00\x00\x00")

func bakeLuaBytes() ([]byte, error) {
	return bindataRead(
		_bakeLua,
		"bake.lua",
	)
}

func bakeLua() (*asset, error) {
	bytes, err := bakeLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "bake.lua", size: 149, mode: os.FileMode(420), modTime: time.Unix(1445379615, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _dockerLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x90\x41\x6a\xc3\x30\x10\x45\xf7\x3e\xc5\x47\xdd\xd8\xe0\x04\x7a\x00\x9f\xa4\x74\x21\x4b\xe3\x44\xc4\x1e\x09\x79\x04\x2d\xa5\x77\xaf\x46\xca\xa6\x90\x8d\x17\x33\x6f\xde\xff\x96\x8f\xee\x41\x19\x0b\x7e\x7e\x87\x61\x2b\xec\x24\x44\x46\x9f\x5e\xd7\x12\x76\x3f\x26\x2b\xf7\x19\x36\xdf\xce\x69\x00\x2e\x17\xb8\xc8\xa7\xe4\xe2\x04\x81\x83\x04\xbb\xc3\x3c\x35\xed\xc0\x54\xe0\x38\x2c\xfb\x4a\xbb\xc3\xab\xfb\xb9\x37\x33\x4c\x47\x6a\x58\x53\xd9\x94\x88\xbd\xca\xcb\x41\x2c\x67\x9d\x86\x0d\xf2\x9d\x68\x6c\x81\x58\x16\x18\xb1\xeb\x4e\x06\x72\x27\xae\x7b\x60\x8b\x19\x61\x79\x9f\xdf\x14\xa9\x5d\xdb\x10\x68\xd8\x35\xf0\x49\x59\xc6\x1a\xdc\x3b\x7f\x84\xcf\xa9\x01\xd4\x0a\xe9\xf7\x5f\x74\xb2\xee\x61\x6f\x04\x89\x58\xa9\xff\xc0\xf0\xca\xa5\xaf\xa0\x22\x75\x7c\x91\x1b\x3b\x51\x58\xef\x95\x98\xa6\x41\xdd\x7f\x01\x00\x00\xff\xff\x28\x97\xba\xb9\x50\x01\x00\x00")

func dockerLuaBytes() ([]byte, error) {
	return bindataRead(
		_dockerLua,
		"docker.lua",
	)
}

func dockerLua() (*asset, error) {
	bytes, err := dockerLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docker.lua", size: 336, mode: os.FileMode(420), modTime: time.Unix(1445895446, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _gitLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x4a\xcf\x2c\x51\xb0\x55\xa8\xae\xe5\xe2\x4a\x2b\xcd\x4b\x2e\xc9\xcc\xcf\x53\x00\x0a\xe9\x25\xe7\xe7\xe6\x66\x96\x68\x68\x72\xa5\xe6\xa5\x70\x01\x02\x00\x00\xff\xff\xd8\x9c\xc9\xdc\x24\x00\x00\x00")

func gitLuaBytes() ([]byte, error) {
	return bindataRead(
		_gitLua,
		"git.lua",
	)
}

func gitLua() (*asset, error) {
	bytes, err := gitLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "git.lua", size: 36, mode: os.FileMode(420), modTime: time.Unix(1445699840, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _goLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x6c\x8f\x41\x6a\xc4\x30\x0c\x45\xf7\x39\xc5\xc7\xdd\x24\x90\x19\xe8\x01\x72\x92\xd2\x85\xc7\x56\x5c\x33\x89\x6c\x12\x19\x5a\x4a\xef\x5e\xc9\x59\x15\xba\xf1\x42\xff\xe9\xe9\x3b\x15\x2c\xf8\xfe\x19\x86\xb5\x71\x90\x5c\x18\xa9\xdc\x1f\x2d\x6f\x71\xac\xcf\x34\xc3\x1f\xe9\x9c\x06\xe0\x76\x43\x28\x7c\xca\xd1\x82\x20\x73\x96\xec\x37\x38\xdd\xee\xac\xd3\x70\xdf\x3d\x47\x25\xc3\x1e\x4d\xa9\x99\x9b\xe1\xae\x58\xfd\x5d\xe1\x6b\x25\x8e\x26\x6d\x3b\xb1\x9c\x3a\xcd\x2b\xe4\xab\xd2\xd8\x0f\x61\x59\xe0\xc4\x3f\x36\x72\x90\x0f\x62\xcd\x81\xb5\x1c\xc8\xcb\xeb\xfc\x62\x08\x62\xe9\x43\xa0\x63\xf7\xcc\x27\x1d\x32\xea\xd1\xab\xeb\x5b\x7e\x9f\x3a\x40\xbd\x8c\xbd\x7f\x4e\x57\x1f\x9e\x3e\x11\x44\x9b\xd3\x55\x7e\xf8\xcf\xa5\x9f\x37\x8f\x29\x3e\x29\x8c\x17\xd0\xd8\xd6\x0d\x98\xa6\xc1\xd4\xbf\x01\x00\x00\xff\xff\x25\x8c\xb8\xa4\x3e\x01\x00\x00")

func goLuaBytes() ([]byte, error) {
	return bindataRead(
		_goLua,
		"go.lua",
	)
}

func goLua() (*asset, error) {
	bytes, err := goLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "go.lua", size: 318, mode: os.FileMode(420), modTime: time.Unix(1445895434, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

var _shimLua = []byte("\x1f\x8b\x08\x00\x00\x09\x6e\x88\x00\xff\x74\x90\x51\x4e\xc4\x30\x0c\x44\xff\x7b\x8a\x51\xbe\x1a\xa9\xdb\x03\x20\xf5\x2c\x51\xda\xb8\xc5\x62\xf1\x56\x8d\x41\x20\xc4\xdd\x71\xba\x0b\x0d\x1f\xfd\xcc\x64\xe6\xcd\xc8\xf3\x9b\x4c\xca\x37\x81\xc6\x6d\x21\x6d\x25\xbe\x52\x87\x44\x2b\x49\x22\x99\x98\x72\x87\x59\x7c\x03\xc4\x9c\x69\xd3\x56\x3f\x57\xda\x5d\x1e\xc3\x00\x97\x75\x63\x59\x5c\x07\xc7\xf2\x1e\xaf\x9c\x1e\x20\x14\x0b\x8a\xf9\x09\x0e\x7d\x8f\x23\xe7\x1b\xa3\x5d\x2e\x86\xc5\x14\x05\x23\x61\x2d\xec\x04\x16\x2b\x41\xa6\xe9\x26\x09\x46\xe9\xcd\xc7\xf3\x3d\x59\x2f\xba\x37\xff\x2e\x77\xd0\x67\x12\xb3\xa2\x10\x87\x7f\xdb\x77\xb5\x16\xec\xff\xeb\xdb\x54\x13\xca\x8a\x10\xc6\xf8\x42\x61\xa4\x85\x25\x9c\x5e\xc0\x57\x3b\xec\x16\xe7\xed\xad\x7f\xa0\xff\xc8\xf6\xa8\xb9\xbe\xd9\x8b\x8f\xa3\xb3\x5e\xa9\x55\xfa\x50\x7f\x64\x32\x69\xa8\x3f\xf6\xc8\x4f\x00\x00\x00\xff\xff\xdf\x82\x47\xc1\xa8\x01\x00\x00")

func shimLuaBytes() ([]byte, error) {
	return bindataRead(
		_shimLua,
		"shim.lua",
	)
}

func shimLua() (*asset, error) {
	bytes, err := shimLuaBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "shim.lua", size: 424, mode: os.FileMode(420), modTime: time.Unix(1445712746, 0)}
	a := &asset{bytes: bytes, info:  info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if (err != nil) {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"bake.lua": bakeLua,
	"docker.lua": dockerLua,
	"git.lua": gitLua,
	"go.lua": goLua,
	"shim.lua": shimLua,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"bake.lua": &bintree{bakeLua, map[string]*bintree{
	}},
	"docker.lua": &bintree{dockerLua, map[string]*bintree{
	}},
	"git.lua": &bintree{gitLua, map[string]*bintree{
	}},
	"go.lua": &bintree{goLua, map[string]*bintree{
	}},
	"shim.lua": &bintree{shimLua, map[string]*bintree{
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
        data, err := Asset(name)
        if err != nil {
                return err
        }
        info, err := AssetInfo(name)
        if err != nil {
                return err
        }
        err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
        if err != nil {
                return err
        }
        err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
        if err != nil {
                return err
        }
        err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
        if err != nil {
                return err
        }
        return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
        children, err := AssetDir(name)
        // File
        if err != nil {
                return RestoreAsset(dir, name)
        }
        // Dir
        for _, child := range children {
                err = RestoreAssets(dir, filepath.Join(name, child))
                if err != nil {
                        return err
                }
        }
        return nil
}

func _filePath(dir, name string) string {
        cannonicalName := strings.Replace(name, "\\", "/", -1)
        return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

